spring.datasource.url=jdbc:mysql://10.5.7.210:3306/eloradmin
spring.datasource.username=sail
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
server.port=8063
# socket-server.host=192.168.0.10
# socket-server.host=10.0.2.2
socket-server.port=8085
socket-server.host=10.5.7.45
# actualiza la estructura de la BBDD
#spring.jpa.hibernate.ddl-auto=update
# Muestra logs en la consola de las consultas de SQL
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
app.jwt.secret=sdsdfsdgfgdfghghjhjgujk

# MAIL
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=elorchat.noreply@gmail.com
spring.mail.password=lxszzzpqjploytmx
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# HTTPS
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
# server.ssl.key-store=classpath:keystore/reto3.p12
server.ssl.key-store=classpath:keystore/certificate.p12
# The password used to generate the certificate
# server.ssl.key-store-password=mikel12
server.ssl.key-store-password=mikel1234
# The alias mapped to the certificate
# server.ssl.key-alias=reto3
# Since we are using a Spring Security enabled application, let's configure it to accept only HTTPS requests
server.ssl.enabled=true
